---
import BaseLayout from "./Base.astro";
import { getLocaleTime, getPreviousAndNextPosts, sortMDByDate } from "src/util";
import Paginator from "@/components/Paginator";
import type { Post } from "@/types";

const {
	content: { title, description, publishDate, tags },
	headings,
} = Astro.props;
const date = new Date(publishDate);
const datetime = date.toISOString();
const postDate = getLocaleTime(date);
const currentPage = new URL(Astro.request.url).pathname;
const allPosts = await Astro.glob<Post>("../pages/posts/*.mdx");
const allSortedPosts = sortMDByDate(allPosts);
const { prev, next } = getPreviousAndNextPosts(currentPage, allSortedPosts);
const paginationProps = {
	...(prev && {
		prevUrl: {
			url: prev.url,
			text: `← ${prev.frontmatter.title}`,
			srLabel: " Previous Article:",
		},
	}),
	...(next && {
		nextUrl: {
			url: next.url,
			text: `${next.frontmatter.title} →`,
			srLabel: "Next Article:",
		},
	}),
};
---

<BaseLayout meta={{ title, description }}>
	<link
		rel="stylesheet"
		href="https://cdn.jsdelivr.net/npm/katex@0.15.2/dist/katex.min.css"
		integrity="sha384-MlJdn/WNKDGXveldHDdyRP1R4CTHr3FeuDNfhsLPYrq2t0UBkUdK2jyTnXPEK1NQ"
		crossorigin="anonymous"
	/>

	<div class="px-4 sm:px-8 sm:grid sm:items-start max-w-6xl mx-auto" id="content-wrapper">
		<!-- Mobile TOC at top -->
		<div class="block sm:hidden mb-8 -mx-4">
			<details class="bg-theme p-4 rounded-lg border border-accent/20">
				<summary class="font-semibold cursor-pointer">Table of Contents</summary>
				<ul class="mt-4 text-sm space-y-2">
					{
						headings.map(({ slug, text }) => (
							<li class="line-clamp-2 hover:text-accent">
								<a href={`#${slug}`} aria-label={`Scroll to section: ${text}`}>
									<span>&#35;</span> {text}
								</a>
							</li>
						))
					}
				</ul>
			</details>
		</div>

		<article class="col-span-full -mx-4 sm:mx-0">
			<h1 class="title">{title}</h1>
			<span
				class="flex flex-col sm:gap-y-2 md:flex-row md:items-center md:gap-y-0 md:divide-x md:divide-textColor"
			>
				<time {datetime} class="pr-2">{postDate}</time>
				{
					tags?.length && (
						<div class="flex items-center md:pl-2">
							<svg
								aria-hidden="true"
								xmlns="http://www.w3.org/2000/svg"
								class="h-6 w-6"
								viewBox="0 0 24 24"
								stroke-width="1.5"
								stroke="currentColor"
								fill="none"
								stroke-linecap="round"
								stroke-linejoin="round"
							>
								<path stroke="none" d="M0 0h24v24H0z" fill="none" />
								<path d="M7.859 6h-2.834a2.025 2.025 0 0 0 -2.025 2.025v2.834c0 .537 .213 1.052 .593 1.432l6.116 6.116a2.025 2.025 0 0 0 2.864 0l2.834 -2.834a2.025 2.025 0 0 0 0 -2.864l-6.117 -6.116a2.025 2.025 0 0 0 -1.431 -.593z" />
								<path d="M17.573 18.407l2.834 -2.834a2.025 2.025 0 0 0 0 -2.864l-7.117 -7.116" />
								<path d="M6 9h-.01" />
							</svg>
							<ul class="ml-1 flex items-center gap-x-2">
								{tags.map((tag) => (
									<li>
										<a
											class="cactus-link inline-block"
											aria-label={`View more blogs with the tag ${tag}`}
											href={`/tags/${tag}`}
										>
											&#35;{tag}
										</a>
									</li>
								))}
							</ul>
						</div>
					)
				}
			</span>
			<p class="mt-8">{description}</p>
			<div
				class="mt-14 prose prose-lm prose-cactus max-w-none prose-headings:font-semibold prose-headings:before:content-['#'] prose-headings:before:text-accent prose-headings:before:absolute prose-headings:before:-ml-4 prose-th:before:content-none"
			>
				<slot />
			</div>
		</article>

		<!-- Desktop floating TOC -->
		<aside class="hidden sm:block fixed right-4 top-1/2 transform -translate-y-1/2 z-50">
			<button id="toc-toggle" class="flex items-center justify-center p-2 mb-2 text-sm hover:text-accent bg-theme rounded-full shadow-md">
				<span id="toc-label" class="sr-only">Toggle Table of Contents</span>
				<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" viewBox="0 0 20 20" fill="currentColor">
					<path fill-rule="evenodd" d="M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd" />
				</svg>
			</button>
			<div id="toc-content" class="hidden fixed right-16 top-1/2 transform -translate-y-1/2 bg-theme p-4 rounded-lg shadow-lg border border-accent/20 w-64">
				<h2 class="font-semibold">Table of Contents</h2>
				<ul class="mt-4 text-xs space-y-2 max-h-[60vh] overflow-y-auto">
					{
						headings.map(({ slug, text }) => (
							<li class="line-clamp-2 hover:text-accent">
								<a href={`#${slug}`} aria-label={`Scroll to section: ${text}`}>
									<span>&#35;</span> {text}
								</a>
							</li>
						))
					}
				</ul>
			</div>
		</aside>
	</div>
	<div class="mt-24">
		<Paginator {...paginationProps} />
	</div>
</BaseLayout>

<style>
	/* Hide the weird code block adding the language */
	:global(article pre .language-id) {
		@apply hidden;
	}

	#content-wrapper {
		grid-template-columns: 1fr;
		transition: grid-template-columns 0.2s ease-in-out;
	}

	#toc-content {
		transition: opacity 0.2s ease-in-out, transform 0.2s ease-in-out;
		opacity: 0;
		transform: translate(1rem, -50%);
	}

	#toc-content.visible {
		opacity: 1;
		transform: translate(0, -50%);
	}

	#toc-toggle svg {
		transition: transform 0.2s ease-in-out;
	}

	#toc-toggle.active {
		@apply text-accent;
	}

	/* Make the details marker more attractive */
	details > summary {
		list-style: none;
	}
	details > summary::-webkit-details-marker {
		display: none;
	}
	details > summary::before {
		content: '►';
		display: inline-block;
		margin-right: 0.5rem;
		transition: transform 0.2s;
	}
	details[open] > summary::before {
		transform: rotate(90deg);
	}
</style>

<script
	src="https://giscus.app/client.js"
	data-repo="rezzmk/mcaramalho-blog"
	data-repo-id="R_kgDOIe-_gA"
	data-category="Announcements"
	data-category-id="DIC_kwDOIe-_gM4CZYur"
	data-mapping="pathname"
	data-strict="1"
	data-reactions-enabled="1"
	data-emit-metadata="0"
	data-input-position="bottom"
	data-theme="dark"
	data-lang="en"
	data-loading="lazy"
	crossorigin="anonymous"
	async
></script>

<script>
	const tocToggle = document.getElementById('toc-toggle');
	const tocContent = document.getElementById('toc-content');

	if (tocToggle && tocContent) {
		tocToggle.addEventListener('click', () => {
			tocContent.classList.toggle('hidden');
			// Add a small delay to allow the hidden class to be removed before adding visible
			setTimeout(() => {
				tocContent.classList.toggle('visible');
			}, 10);
			tocToggle.classList.toggle('active');
		});

		// Close TOC when clicking outside
		document.addEventListener('click', (e) => {
			if (!tocContent.contains(e.target) && !tocToggle.contains(e.target)) {
				tocContent.classList.remove('visible');
				setTimeout(() => {
					tocContent.classList.add('hidden');
				}, 200);
				tocToggle.classList.remove('active');
			}
		});

		// Close TOC when pressing Escape
		document.addEventListener('keydown', (e) => {
			if (e.key === 'Escape') {
				tocContent.classList.remove('visible');
				setTimeout(() => {
					tocContent.classList.add('hidden');
				}, 200);
				tocToggle.classList.remove('active');
			}
		});
	}
</script>
